{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintE where

-- pretty-printer generated by the BNF converter

import AbsE
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Boolean where
  prt i e = case e of
    Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])

instance Print EndLine where
  prt i e = case e of
    EndLine1 -> prPrec i 0 (concatD [doc (showString ";")])
    EndLine2 -> prPrec i 0 (concatD [doc (showString "\n")])

instance Print BasicType where
  prt i e = case e of
    BasicType_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    BasicType_char -> prPrec i 0 (concatD [doc (showString "char")])
    BasicType_string -> prPrec i 0 (concatD [doc (showString "string")])
    BasicType_float -> prPrec i 0 (concatD [doc (showString "float")])
    BasicType_int -> prPrec i 0 (concatD [doc (showString "int")])
    BasicType_void -> prPrec i 0 (concatD [doc (showString "void")])

instance Print RExpr where
  prt i e = case e of
    Or rexpr1 rexpr2 -> prPrec i 0 (concatD [prt 0 rexpr1, doc (showString "||"), prt 1 rexpr2])
    And rexpr1 rexpr2 -> prPrec i 1 (concatD [prt 1 rexpr1, doc (showString "&&"), prt 2 rexpr2])
    Not rexpr -> prPrec i 2 (concatD [doc (showString "!"), prt 3 rexpr])
    Eq rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "=="), prt 6 rexpr2])
    Neq rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "!="), prt 6 rexpr2])
    Lt rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "<"), prt 6 rexpr2])
    LtE rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "<="), prt 6 rexpr2])
    Gt rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString ">"), prt 6 rexpr2])
    GtE rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString ">="), prt 6 rexpr2])
    Add rexpr1 rexpr2 -> prPrec i 7 (concatD [prt 7 rexpr1, doc (showString "+"), prt 8 rexpr2])
    Sub rexpr1 rexpr2 -> prPrec i 7 (concatD [prt 7 rexpr1, doc (showString "-"), prt 8 rexpr2])
    Mul rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "*"), prt 9 rexpr2])
    FloDiv rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "/"), prt 9 rexpr2])
    IntDiv rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "//"), prt 9 rexpr2])
    Rem rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "%"), prt 9 rexpr2])
    Mod rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "%%"), prt 9 rexpr2])
    Pow rexpr1 rexpr2 -> prPrec i 9 (concatD [prt 10 rexpr1, doc (showString "**"), prt 9 rexpr2])
    Neg rexpr -> prPrec i 11 (concatD [doc (showString "-"), prt 12 rexpr])
    Ref lexpr -> prPrec i 11 (concatD [doc (showString "&"), prt 0 lexpr])
    FCall funcall -> prPrec i 12 (concatD [prt 0 funcall])
    Int n -> prPrec i 13 (concatD [prt 0 n])
    Char c -> prPrec i 13 (concatD [prt 0 c])
    String str -> prPrec i 13 (concatD [prt 0 str])
    Float d -> prPrec i 13 (concatD [prt 0 d])
    Bool boolean -> prPrec i 13 (concatD [prt 0 boolean])
    Lexpr lexpr -> prPrec i 14 (concatD [prt 0 lexpr])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FunCall where
  prt i e = case e of
    Call id rexprs -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexprs, doc (showString ")")])

instance Print LExpr where
  prt i e = case e of
    PreInc lexpr -> prPrec i 0 (concatD [doc (showString "++"), prt 1 lexpr])
    PreDecr lexpr -> prPrec i 0 (concatD [doc (showString "--"), prt 1 lexpr])
    PostInc lexpr -> prPrec i 1 (concatD [prt 2 lexpr, doc (showString "++")])
    PostDecr lexpr -> prPrec i 1 (concatD [prt 2 lexpr, doc (showString "--")])
    BasLExpr blexpr -> prPrec i 2 (concatD [prt 0 blexpr])

instance Print BLExpr where
  prt i e = case e of
    ArrayEl blexpr rexpr -> prPrec i 0 (concatD [prt 0 blexpr, doc (showString "["), prt 0 rexpr, doc (showString "]")])
    Id id -> prPrec i 0 (concatD [prt 0 id])
    Deref blexpr -> prPrec i 0 (concatD [doc (showString "*"), prt 0 blexpr])

instance Print Program where
  prt i e = case e of
    Prog decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print Decl where
  prt i e = case e of
    Dvar id typespec endline -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, prt 0 typespec, prt 0 endline])
    DvarAss id basictype rexpr endline -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, prt 0 basictype, doc (showString ":="), prt 0 rexpr, prt 0 endline])
    Dconst id basictype rexpr endline -> prPrec i 0 (concatD [doc (showString "dev"), prt 0 id, prt 0 basictype, doc (showString "="), prt 0 rexpr, prt 0 endline])
    Dfun id parameters compstmt -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id, doc (showString "("), prt 0 parameters, doc (showString ")"), prt 0 compstmt])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print TypeSpec where
  prt i e = case e of
    BasTyp basictype -> prPrec i 0 (concatD [prt 0 basictype])
    CompType compoundtype -> prPrec i 0 (concatD [prt 0 compoundtype])

instance Print CompoundType where
  prt i e = case e of
    ArrDef rexpr typespec -> prPrec i 0 (concatD [doc (showString "["), prt 0 rexpr, doc (showString "]"), prt 0 typespec])
    ArrUnDef typespec -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]"), prt 0 typespec])
    Pointer typespec -> prPrec i 0 (concatD [doc (showString "*"), prt 0 typespec])

instance Print Parameter where
  prt i e = case e of
    Param modality id -> prPrec i 0 (concatD [prt 0 modality, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Modality where
  prt i e = case e of
    Modality1 -> prPrec i 0 (concatD [])
    Modality_var -> prPrec i 0 (concatD [doc (showString "var")])

instance Print CompStmt where
  prt i e = case e of
    BlockDecl decls stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 decls, prt 0 stmts, doc (showString "}")])

instance Print Stmt where
  prt i e = case e of
    Comp compstmt -> prPrec i 0 (concatD [prt 0 compstmt])
    ProcCall funcall endline -> prPrec i 0 (concatD [prt 0 funcall, prt 0 endline])
    Iter iterstmt -> prPrec i 0 (concatD [prt 0 iterstmt])
    Sel selectionstmt -> prPrec i 0 (concatD [prt 0 selectionstmt])
    Assgn lexpr assignmentop rexpr endline -> prPrec i 0 (concatD [prt 0 lexpr, prt 0 assignmentop, prt 0 rexpr, prt 0 endline])
    LExprStmt lexpr endline -> prPrec i 0 (concatD [prt 0 lexpr, prt 0 endline])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Assignment_op where
  prt i e = case e of
    Assign -> prPrec i 0 (concatD [doc (showString ":=")])
    AssgnOr -> prPrec i 0 (concatD [doc (showString "|=")])
    AssgnAnd -> prPrec i 0 (concatD [doc (showString "&=")])
    AssgnAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    AssgnSub -> prPrec i 0 (concatD [doc (showString "-=")])
    AssgnMul -> prPrec i 0 (concatD [doc (showString "*=")])
    AssgnDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    AssgnDivInt -> prPrec i 0 (concatD [doc (showString "//=")])
    AssgnRem -> prPrec i 0 (concatD [doc (showString "%=")])
    AssgnMod -> prPrec i 0 (concatD [doc (showString "%%=")])
    AssgnPow -> prPrec i 0 (concatD [doc (showString "**=")])

instance Print SelectionStmt where
  prt i e = case e of
    IfNoElse rexpr compstmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 compstmt])
    IfElse rexpr compstmt1 compstmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 compstmt1, doc (showString "else"), prt 0 compstmt2])
    Switch rexpr switchlabels compstmt -> prPrec i 0 (concatD [doc (showString "switch"), prt 0 rexpr, doc (showString "match"), prt 0 switchlabels, doc (showString "default"), prt 0 compstmt])

instance Print SwitchLabel where
  prt i e = case e of
    SwitchL rexpr compstmt -> prPrec i 0 (concatD [prt 0 rexpr, prt 0 compstmt])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print IterStmt where
  prt i e = case e of
    While rexpr compstmt -> prPrec i 0 (concatD [doc (showString "while"), prt 0 rexpr, prt 0 compstmt])
    DoWhile compstmt rexpr -> prPrec i 0 (concatD [doc (showString "do"), prt 0 compstmt, doc (showString "while"), prt 0 rexpr, doc (showString ";")])
    For id rexpr compstmt -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), prt 0 rexpr, prt 0 compstmt])


