

module AbsE where

-- Haskell module generated by the BNF converter




newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Program = PDefs [Decl] | PTDefs [AnnotatedDecl]
  deriving (Eq, Ord, Show, Read)

data AnnotatedDecl = UntypedDecl Decl | TypedDecl Type Decl
  deriving (Eq, Ord, Show, Read)

data Decl = DeclFun LExpr [Arg] Guard [Stmt] | DeclStmt Stmt
  deriving (Eq, Ord, Show, Read)

data Arg = ArgDecl Modality PIdent Guard
  deriving (Eq, Ord, Show, Read)

data Modality = ModEmpty | ModVar | ModDef
  deriving (Eq, Ord, Show, Read)

data Guard = GuardVoid | GuardType Type
  deriving (Eq, Ord, Show, Read)

data Stmt
    = StmtExpr Expr
    | StmtDecl LExpr Guard
    | StmtIterDecl LExpr Guard
    | StmtVarInit LExpr Guard Expr
    | StmtDefInit LExpr Guard Expr
    | StmtReturn [Expr]
    | StmtBlock [Decl]
    | StmtIfElse Expr Stmt Stmt
    | StmtIfNoElse Expr Stmt
    | SSwitchCase Expr [NormCase] [DfltCase]
    | StmtBreak
    | StmtContinue
    | StmtWhile Expr Stmt
    | StmtFor PIdent TypeIter Stmt
  deriving (Eq, Ord, Show, Read)

data NormCase = CaseNormal Expr Stmt
  deriving (Eq, Ord, Show, Read)

data DfltCase = CaseDefault Stmt
  deriving (Eq, Ord, Show, Read)

data Expr
    = StmtAssign LExpr AssignOperator Expr
    | LeftExpr LExpr
    | ExprInt Integer
    | ExprDouble Double
    | ExprChar Char
    | ExprString String
    | ExprTrue
    | ExprFalse
    | ExprFunCall PIdent [Arg]
    | ExprBoolNot Expr
    | ExprDeref LExpr
    | ExprNegation Expr
    | ExprAddition Expr
    | ExprPower Expr Expr
    | ExprMul Expr Expr
    | ExprFloatDiv Expr Expr
    | ExprIntDiv Expr Expr
    | ExprReminder Expr Expr
    | ExprModulo Expr Expr
    | ExprPlus Expr Expr
    | ExprMinus Expr Expr
    | ExprIntInc Expr Expr
    | ExprIntExc Expr Expr
    | ExprLt Expr Expr
    | ExprGt Expr Expr
    | ExprLtEq Expr Expr
    | ExprGtEq Expr Expr
    | ExprEq Expr Expr
    | ExprNeq Expr Expr
    | ExprAnd Expr Expr
    | ExprOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data LExpr = LExprId PIdent | LExprRef Ref
  deriving (Eq, Ord, Show, Read)

data Ref = RefExpr LExpr
  deriving (Eq, Ord, Show, Read)

data AssignOperator
    = OpAssign
    | OpOr
    | OpAnd
    | OpPlus
    | OpMinus
    | OpMul
    | OpIntDiv
    | OpFloatDiv
    | OpRemainder
    | OpModulo
    | OpPower
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeBool
    | TypeDouble
    | TypeInt
    | TypeVoid
    | TypeChar
    | TypeString
    | TypeCompound CompoundType
  deriving (Eq, Ord, Show, Read)

data CompoundType = TypePointer Type | TypeIterable TypeIter
  deriving (Eq, Ord, Show, Read)

data TypeIter = TypeIterInterval Expr | TypeIterArray [Expr]
  deriving (Eq, Ord, Show, Read)

