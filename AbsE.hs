

module AbsE where

-- Haskell module generated by the BNF converter




newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Program = PDefs [Decl] | PTDefs [AnnDecl]
  deriving (Eq, Ord, Show, Read)

data AnnDecl = LabeledDecl Decl
  deriving (Eq, Ord, Show, Read)

data Arg = ArgDecl Modality PIdent Guard
  deriving (Eq, Ord, Show, Read)

data Modality = ModEmpty | ModVar | ModDef
  deriving (Eq, Ord, Show, Read)

data Guard = GuardVoid | GuardType Type
  deriving (Eq, Ord, Show, Read)

data Stmt
    = StmtExpr Expr EndLine
    | StmtDecl LExpr Guard EndLine
    | StmtVarInit LExpr Guard Expr EndLine
  deriving (Eq, Ord, Show, Read)

data Expr
    = StmtAssign LExpr AssignOperator Expr
    | LeftExpr LExpr
    | ExprInt Integer
    | ExprNegation Expr
    | ExprAddition Expr
    | ExprPlus Expr Expr
    | ExprMinus Expr Expr
  deriving (Eq, Ord, Show, Read)

data Decl = DeclStmt Stmt
  deriving (Eq, Ord, Show, Read)

data LExpr = LExprId PIdent
  deriving (Eq, Ord, Show, Read)

data AssignOperator
    = OpAssign
    | OpOr
    | OpAnd
    | OpPlus
    | OpMinus
    | OpMul
    | OpIntDiv
    | OpFloatDiv
    | OpRemainder
    | OpModulo
    | OpPower
  deriving (Eq, Ord, Show, Read)

data Type = TypeInt
  deriving (Eq, Ord, Show, Read)

data EndLine = Semicolon
  deriving (Eq, Ord, Show, Read)

