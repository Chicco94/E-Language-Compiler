

module AbsE where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Boolean = Boolean_true | Boolean_false
  deriving (Eq, Ord, Show, Read)

data EndLine = EndLine1 | EndLine2
  deriving (Eq, Ord, Show, Read)

data BasicType
    = BasicType_bool
    | BasicType_char
    | BasicType_string
    | BasicType_float
    | BasicType_int
    | BasicType_void
  deriving (Eq, Ord, Show, Read)

data RExpr
    = Or RExpr RExpr
    | And RExpr RExpr
    | Not RExpr
    | Eq RExpr RExpr
    | Neq RExpr RExpr
    | Lt RExpr RExpr
    | LtE RExpr RExpr
    | Gt RExpr RExpr
    | GtE RExpr RExpr
    | Add RExpr RExpr
    | Sub RExpr RExpr
    | Mul RExpr RExpr
    | FloDiv RExpr RExpr
    | IntDiv RExpr RExpr
    | Rem RExpr RExpr
    | Mod RExpr RExpr
    | Pow RExpr RExpr
    | Neg RExpr
    | Ref LExpr
    | FCall FunCall
    | Int Integer
    | Char Char
    | String String
    | Float Double
    | Bool Boolean
    | Lexpr LExpr
  deriving (Eq, Ord, Show, Read)

data FunCall = Call Ident [RExpr]
  deriving (Eq, Ord, Show, Read)

data LExpr
    = PreInc LExpr
    | PreDecr LExpr
    | PostInc LExpr
    | PostDecr LExpr
    | BasLExpr BLExpr
  deriving (Eq, Ord, Show, Read)

data BLExpr = ArrayEl BLExpr RExpr | Id Ident | Deref BLExpr
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Decl]
  deriving (Eq, Ord, Show, Read)

data Guard = Guard1 | GuardGuardT GuardT | GuardGuardC GuardC
  deriving (Eq, Ord, Show, Read)

data GuardT = GdefType BasicType
  deriving (Eq, Ord, Show, Read)

data GuardC = GDefCons RExpr
  deriving (Eq, Ord, Show, Read)

data Decl
    = Dvar Ident TypeSpec EndLine
    | DvarAss Ident BasicType Guard RExpr EndLine
    | Dconst Ident BasicType RExpr EndLine
    | Dfun Ident [Parameter] Guard CompStmt
  deriving (Eq, Ord, Show, Read)

data TypeSpec = BasTyp BasicType | CompType CompoundType
  deriving (Eq, Ord, Show, Read)

data CompoundType
    = ArrDef RExpr TypeSpec | ArrUnDef TypeSpec | Pointer TypeSpec
  deriving (Eq, Ord, Show, Read)

data Parameter = Param Modality Ident Guard
  deriving (Eq, Ord, Show, Read)

data Modality = Modality1 | Modality_var
  deriving (Eq, Ord, Show, Read)

data CompStmt = BlockDecl [Decl] [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Comp CompStmt
    | ProcCall FunCall EndLine
    | Iter IterStmt
    | Sel SelectionStmt
    | Assgn LExpr Assignment_op RExpr EndLine
    | LExprStmt LExpr EndLine
  deriving (Eq, Ord, Show, Read)

data Assignment_op
    = Assign
    | AssgnOr
    | AssgnAnd
    | AssgnAdd
    | AssgnSub
    | AssgnMul
    | AssgnDiv
    | AssgnDivInt
    | AssgnRem
    | AssgnMod
    | AssgnPow
  deriving (Eq, Ord, Show, Read)

data SelectionStmt
    = IfNoElse RExpr CompStmt
    | IfElse RExpr CompStmt CompStmt
    | Switch RExpr [SwitchLabel] CompStmt
  deriving (Eq, Ord, Show, Read)

data SwitchLabel = SwitchL RExpr CompStmt
  deriving (Eq, Ord, Show, Read)

data IterStmt
    = While RExpr CompStmt
    | DoWhile CompStmt RExpr
    | For Ident RExpr CompStmt
  deriving (Eq, Ord, Show, Read)

