-- Position to ident
position token PIdent (letter (letter|digit|'_'|'\'')*) ;

-- A program is a sequence of declarations.
PDefs.     Program ::= [Decl] ;
terminator Decl "" ;

-- Include in the abstract syntax a type annotated version of expressions.
--internal ExprTyped. Expr ::= "[" Type "]" Expr ;
internal PTDefs. Program ::=  [AnnDecl] ;
terminator AnnDecl "";

-- A declaration is an annotated declaration with no label.
LabeledDecl. AnnDecl ::= Decl ;

-- A program may containt (C-like) comments, which are ignored by the parser.
comment "//" ;
comment "/*" "*/" ;

-- Function declaration. E.g.: def foo (var x :int,def y :double) : int { }
DeclFun.   Decl ::= "def" LExpr "(" [Arg] ")" Guard "{" [Stmt] "}" ;
AnnotatedDecl.   AnnDecl ::= "[" Type ":]" Decl ;
separator  Arg "," ;
terminator Stmt "" ;

-- An argument declaration has a type and an identifier.
ArgDecl.   Arg      ::= Modality PIdent Guard ;
ModEmpty.  Modality ::= {-empty-} ;  -- no modality
ModVar.    Modality ::= "var" ;      -- variable modality
ModDef.    Modality ::= "def" ;      -- constant modality

-- Guards of declarations. E.g.: 
-- def i : <guard>; 
-- def foo (i : <guard>) : <guard> {}
GuardVoid.  Guard ::= {-empty-} ;  -- empty guard
GuardType.  Guard ::= ":" Type ;   -- guarded

-- Any Expression followed by a semicolon ; can be used as a statement.
StmtExpr.       Stmt     ::= Expr ";" ;

--StmtDecl.       Stmt     ::= "var" LExpr Guard ";" ;
--StmtInit.       Stmt     ::= "var" LExpr Guard ":=" Expr ";" ;
--StmtArrDecl.    Stmt     ::= "def" LExpr Guard ":=" TypeIter ";" ;

StmtDecl.        Stmt     ::= "var" LExpr Guard ";" ;                      -- Variable declaration.
StmtIterDecl.    Stmt     ::= "var" "[" LExpr "]" Guard ";" ;              -- Iterable type declaration.

StmtVarInit.     Stmt     ::= "var" LExpr Guard ":=" Expr ";" ;     -- Constant/variable initialization.
StmtDefInit.     Stmt     ::= "def" LExpr Guard ":=" Expr ";" ;

-- ###
-- 1 reduce/reduce conflict
--StmtVarIterInit. Stmt     ::= "var" LExpr Guard ":=" TypeIter ";" ; -- Constant/variable iterable type initialization.
--StmtDefIterInit. Stmt     ::= "def" LExpr Guard ":=" TypeIter ";" ;
--DeclModVar.      DeclModality ::= "var" ;
--DeclModDef.      DeclModality ::= "def" ;

StmtReturn.     Stmt     ::= "return" [Expr] ";" ;

StmtBlock.      Stmt     ::= "{" [Decl] "}" ;

-- ###
-- 1 shift/reduce conflict
StmtIfElse.     Stmt     ::= "if" "(" Expr ")" Stmt "else" Stmt ;
StmtIfNoElse.   Stmt     ::= "if" "(" Expr ")" Stmt ;
SSwitchCase.    Stmt     ::= "switch" "(" Expr ")" "{" [NormCase] [DfltCase] "}" ;
CaseNormal.     NormCase ::= "match" Expr Stmt ;
CaseDefault.    DfltCase ::= "match _" Stmt ;
separator NormCase "" ;
separator DfltCase "" ;
StmtBreak.      Stmt     ::= "break" ;
StmtContinue.   Stmt     ::= "continue" ;

StmtWhile.      Stmt     ::= "while" "(" Expr ")" Stmt ;
StmtFor.        Stmt     ::= "for" PIdent "in" TypeIter Stmt ;

StmtAssign.     Expr     ::= LExpr  AssignOperator  Expr1  ;


-- A statement is a declaration.
DeclStmt.       Decl ::= Stmt ;

-- (Left) Expressions
LExprId.        LExpr ::= PIdent ;
--LExprDeref.     LExpr ::= Deref ;
LExprRef.       LExpr ::= Ref ;
--DerefExpr.      Deref ::= "&" LExpr;
RefExpr.        Ref   ::= "*" LExpr;

-- (Right) Expressions
LeftExpr.     Expr17 ::= LExpr ;
ExprInt.      Expr16 ::= Integer ;
ExprDouble.   Expr16 ::= Double ;
ExprChar.     Expr16 ::= Char ;
ExprString.   Expr16 ::= String ;
ExprTrue.     Expr16 ::= "true" ;
ExprFalse.    Expr16 ::= "false" ;

ExprFunCall.  Expr15 ::= PIdent "(" [Arg] ")" ;

ExprBoolNot.  Expr14  ::= "!" Expr15 ;
ExprDeref.    Expr14  ::= "&" LExpr ;
-- ###
-- 6 (3+3) shift/reduce conflicts
ExprNegation. Expr14  ::= "-" Expr15 ;
ExprAddition. Expr14  ::= "+" Expr15 ;

--ExprPower.    Expr13 ::= Expr14 "**"  Expr13 ;

-- ###
-- 3 shift/reduce conflicts
ExprMul.      Expr12 ::= Expr12 "*"  Expr13 ;
ExprFloatDiv. Expr12 ::= Expr12 "/"  Expr13 ;
ExprIntDiv.   Expr12 ::= Expr12 "//" Expr13 ;
ExprReminder. Expr12 ::= Expr12 "%"  Expr13 ;
ExprModulo.   Expr12 ::= Expr12 "%%" Expr13 ;

--ExprReference. Expr11 ::= "&" LExpr ;
ExprPlus.      Expr11 ::= Expr11 "+"  Expr12 ;
ExprMinus.     Expr11 ::= Expr11 "-"  Expr12 ;

ExprIntInc.   Expr10 ::= Expr10 ".."  Expr11 ;
ExprIntExc.   Expr10 ::= Expr10 "..!" Expr11 ;

ExprLt.       Expr9  ::= Expr9  "<"   Expr10 ;
ExprGt.       Expr9  ::= Expr9  ">"   Expr10 ;
ExprLtEq.     Expr9  ::= Expr9  "<="  Expr10 ;
ExprGtEq.     Expr9  ::= Expr9  ">="  Expr10 ;

ExprEq.       Expr8  ::= Expr8  "=="  Expr9 ;
ExprNeq.      Expr8  ::= Expr8  "!="  Expr9 ;

ExprAnd.      Expr4  ::= Expr4  "&&"  Expr5 ;

ExprOr.       Expr3  ::= Expr3  "||"  Expr4 ;

coercions Expr 17 ;
separator Expr "," ;

-- Assignment operators (i.e., l-value operator r-value).
OpAssign.     AssignOperator ::= ":=" ;
OpOr.         AssignOperator ::= "|=" ;
OpAnd.        AssignOperator ::= "&=" ;
OpPlus.       AssignOperator ::= "+=" ;
OpMinus.      AssignOperator ::= "-=" ;
OpMul.        AssignOperator ::= "*=" ;
OpIntDiv.     AssignOperator ::= "//=" ;
OpFloatDiv.   AssignOperator ::= "/=" ;
OpRemainder.  AssignOperator ::= "%=" ;
OpModulo.     AssignOperator ::= "%%=" ;
OpPower.      AssignOperator ::= "**=" ;

-- The available type are bool, double, int, void, char and string.
TypeBool.   Type ::= "bool" ;
TypeDouble. Type ::= "double" ;
TypeInt.    Type ::= "int" ;
TypeVoid.   Type ::= "void" ; 
TypeChar.   Type ::= "char" ;
TypeString. Type ::= "string" ; 
--TypeAny.    Type ::= "any" ;

-- Compound types.
TypeCompound. Type ::= CompoundType ;
TypePointer.  CompoundType ::= Type "*" ; 
TypeIterable. CompoundType ::= TypeIter ;
TypeIterInterval. TypeIter ::= Expr10 ;           -- Iterable interval.
TypeIterArray.    TypeIter ::= "[" [Expr] "]" ;   -- Iterable array.


-- End statement character.
--Semicolon. EndLine ::= ";" ;
--NewLine.   EndLine ::= "\\n" ;

-- The entry point is the program.
entrypoints Program ;


