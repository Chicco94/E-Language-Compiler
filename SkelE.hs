module SkelE where

-- Haskell module generated by the BNF converter

import AbsE
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transPIdent :: PIdent -> Result
transPIdent x = case x of
  PIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs decls -> failure x
  PTDefs anndecls -> failure x
transAnnDecl :: AnnDecl -> Result
transAnnDecl x = case x of
  LabeledDecl decl -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgDecl modality pident guard -> failure x
transModality :: Modality -> Result
transModality x = case x of
  ModEmpty -> failure x
  ModVar -> failure x
  ModDef -> failure x
transGuard :: Guard -> Result
transGuard x = case x of
  GuardVoid -> failure x
  GuardType type_ -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  StmtExpr expr endline -> failure x
  StmtDecl lexpr guard endline -> failure x
  StmtVarInit lexpr guard expr endline -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  StmtAssign lexpr assignoperator expr -> failure x
  LeftExpr lexpr -> failure x
  ExprInt integer -> failure x
  ExprNegation expr -> failure x
  ExprAddition expr -> failure x
  ExprPlus expr1 expr2 -> failure x
  ExprMinus expr1 expr2 -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DeclStmt stmt -> failure x
transLExpr :: LExpr -> Result
transLExpr x = case x of
  LExprId pident -> failure x
transAssignOperator :: AssignOperator -> Result
transAssignOperator x = case x of
  OpAssign -> failure x
  OpOr -> failure x
  OpAnd -> failure x
  OpPlus -> failure x
  OpMinus -> failure x
  OpMul -> failure x
  OpIntDiv -> failure x
  OpFloatDiv -> failure x
  OpRemainder -> failure x
  OpModulo -> failure x
  OpPower -> failure x
transType :: Type -> Result
transType x = case x of
  TypeInt -> failure x
transEndLine :: EndLine -> Result
transEndLine x = case x of
  Semicolon -> failure x

