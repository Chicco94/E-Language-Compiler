module SkelE where

-- Haskell module generated by the BNF converter

import AbsE
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  Boolean_true -> failure x
  Boolean_false -> failure x
transEndLine :: EndLine -> Result
transEndLine x = case x of
  EndLine1 -> failure x
  EndLine2 -> failure x
transBasicType :: BasicType -> Result
transBasicType x = case x of
  BasicType_bool -> failure x
  BasicType_char -> failure x
  BasicType_string -> failure x
  BasicType_float -> failure x
  BasicType_int -> failure x
  BasicType_void -> failure x
transRExpr :: RExpr -> Result
transRExpr x = case x of
  Or rexpr1 rexpr2 -> failure x
  And rexpr1 rexpr2 -> failure x
  Not rexpr -> failure x
  Eq rexpr1 rexpr2 -> failure x
  Neq rexpr1 rexpr2 -> failure x
  Lt rexpr1 rexpr2 -> failure x
  LtE rexpr1 rexpr2 -> failure x
  Gt rexpr1 rexpr2 -> failure x
  GtE rexpr1 rexpr2 -> failure x
  Add rexpr1 rexpr2 -> failure x
  Sub rexpr1 rexpr2 -> failure x
  Mul rexpr1 rexpr2 -> failure x
  FloDiv rexpr1 rexpr2 -> failure x
  IntDiv rexpr1 rexpr2 -> failure x
  Rem rexpr1 rexpr2 -> failure x
  Mod rexpr1 rexpr2 -> failure x
  Pow rexpr1 rexpr2 -> failure x
  Neg rexpr -> failure x
  Ref lexpr -> failure x
  FCall funcall -> failure x
  Int integer -> failure x
  Char char -> failure x
  String string -> failure x
  Float double -> failure x
  Bool boolean -> failure x
  Lexpr lexpr -> failure x
transFunCall :: FunCall -> Result
transFunCall x = case x of
  Call ident rexprs -> failure x
transLExpr :: LExpr -> Result
transLExpr x = case x of
  PreInc lexpr -> failure x
  PreDecr lexpr -> failure x
  PostInc lexpr -> failure x
  PostDecr lexpr -> failure x
  BasLExpr blexpr -> failure x
transBLExpr :: BLExpr -> Result
transBLExpr x = case x of
  ArrayEl blexpr rexpr -> failure x
  Id ident -> failure x
  Deref blexpr -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog decls -> failure x
transGuard :: Guard -> Result
transGuard x = case x of
  GuardVoid -> failure x
  GuardType basictype -> failure x
  GuardCons rexpr -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Dvar ident guard endline -> failure x
  DvarAss ident guard rexpr endline -> failure x
  Dconst ident guard rexpr endline -> failure x
  Dfun ident parameters guard compstmt -> failure x
transTypeSpec :: TypeSpec -> Result
transTypeSpec x = case x of
  BasTyp basictype -> failure x
  CompType compoundtype -> failure x
transCompoundType :: CompoundType -> Result
transCompoundType x = case x of
  ArrDef rexpr typespec -> failure x
  ArrUnDef typespec -> failure x
  Pointer typespec -> failure x
transParameter :: Parameter -> Result
transParameter x = case x of
  Param modality ident guard -> failure x
transModality :: Modality -> Result
transModality x = case x of
  Modality1 -> failure x
  Modality_var -> failure x
transCompStmt :: CompStmt -> Result
transCompStmt x = case x of
  BlockDecl decls stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  Comp compstmt -> failure x
  ProcCall funcall endline -> failure x
  Iter iterstmt -> failure x
  Sel selectionstmt -> failure x
  Assgn lexpr assignmentop rexpr endline -> failure x
  LExprStmt lexpr endline -> failure x
transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign -> failure x
  AssgnOr -> failure x
  AssgnAnd -> failure x
  AssgnAdd -> failure x
  AssgnSub -> failure x
  AssgnMul -> failure x
  AssgnDiv -> failure x
  AssgnDivInt -> failure x
  AssgnRem -> failure x
  AssgnMod -> failure x
  AssgnPow -> failure x
transSelectionStmt :: SelectionStmt -> Result
transSelectionStmt x = case x of
  IfNoElse rexpr compstmt -> failure x
  IfElse rexpr compstmt1 compstmt2 -> failure x
  Switch rexpr switchlabels compstmt -> failure x
transSwitchLabel :: SwitchLabel -> Result
transSwitchLabel x = case x of
  SwitchL rexpr compstmt -> failure x
transIterStmt :: IterStmt -> Result
transIterStmt x = case x of
  While rexpr compstmt -> failure x
  DoWhile compstmt rexpr -> failure x
  For ident rexpr compstmt -> failure x

